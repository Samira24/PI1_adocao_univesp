%prod.quarkus.datasource.db-kind=postgresql
%prod.quarkus.datasource.username=quarkus_test
%prod.quarkus.datasource.password=quarkus_test
%prod.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost/quarkus_test
%prod.quarkus.datasource.jdbc.max-size=8
%prod.quarkus.datasource.jdbc.min-size=2

%prod.quarkus.hibernate-orm.database.generation=drop-and-create
%prod.quarkus.hibernate-orm.log.sql=true
%prod.quarkus.hibernate-orm.sql-load-script=import.sql


quarkus.hibernate-orm.database.generation=drop-and-create
quarkus.hibernate-orm.log.sql=true
quarkus.hibernate-orm.sql-load-script=import.sql



# Caminho para a chave pública usada para verificar os tokens JWT
mp.jwt.verify.publickey.location=META-INF/resources/publicKey.pem

# Caminho para a chave privada usada para assinar os tokens JWT
smallrye.jwt.sign.key.location=META-INF/resources/privateKey.pem


mp.openapi.extensions.security-scheme.bearerAuth.scheme=bearer
mp.openapi.extensions.security-scheme.bearerAuth.bearer-format=JWT
mp.openapi.extensions.security-scheme.bearerAuth.type=http

# Configure a claim específica para roles
mp.jwt.verify.groupsClaim=groups



quarkus.http.cors=true
quarkus.http.cors.origins=*

quarkus.http.host=0.0.0.0
quarkus.http.cors.methods=GET,POST,PUT,DELETE
quarkus.http.cors.headers=accept, authorization, content-type, x-requested-with
mp.jwt.verify.issuer=https://example.com/issuer
quarkus.http.cors.exposed-headers=Content-Disposition

quarkus.log.category."io.quarkus.jwt".level=DEBUG
